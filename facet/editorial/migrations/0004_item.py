# Generated by Django 2.2.11 on 2020-04-06 02:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0004_auto_20200405_1926'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('editorial', '0003_auto_20200405_1933'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.BooleanField(default=True, help_text='If original to participant/entity, true. If picked up, false.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Date time item was created.')),
                ('name', models.TextField(help_text='Internal name for item.')),
                ('headline', models.TextField(help_text='Headline of the item')),
                ('description', models.TextField(blank=True, help_text='Description of the item.')),
                ('content', models.TextField(blank=True, help_text='Content of the item.')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Pitch', 'Pitch'), ('In Progress', 'In Progress'), ('Edit', 'Edit'), ('Revision', 'Revision'), ('Needs Review', 'Needs Review'), ('Ready', 'Ready')], default='DRAFT', help_text='Item status choice.', max_length=25)),
                ('due_edit', models.DateTimeField(blank=True, help_text='Due for edit.', null=True)),
                ('run_date', models.DateTimeField(blank=True, help_text='Planned run date.', null=True)),
                ('update_note', models.TextField(blank=True, help_text='Text commenting regarding any updates or corrections made to the item.')),
                ('excerpt', models.TextField(blank=True, help_text='Excerpt from the item.')),
                ('dateline', models.CharField(blank=True, help_text='Where and when the item was created.', max_length=150)),
                ('share_note', models.TextField(blank=True, help_text='Information for organizations making a copy of the item.')),
                ('topic_code', models.CharField(blank=True, help_text='Unique code as needed to designate topic or coverage.', max_length=75)),
                ('internal_code', models.CharField(blank=True, help_text='Unique code as needed for ingest sytems or internal use. Use as needed.', max_length=75)),
                ('length', models.CharField(blank=True, help_text='Length of item for audio or video.', max_length=75)),
                ('wordcount', models.CharField(blank=True, help_text='Wordcount for text-based items.', max_length=75)),
                ('related_links', models.TextField(blank=True, help_text='Relevant links that can be included with the item.')),
                ('github_link', models.URLField(blank=True, help_text='Link to code for any custom feature.', max_length=300)),
                ('sources', models.TextField(blank=True, help_text='List of sources in the item.')),
                ('edit_note', models.TextField(blank=True, help_text='Information regarding allowable extent of editing and suggestions for specific kinds of edits.')),
                ('pronounciations', models.TextField(blank=True, help_text='Information about pronouncing names or potentially difficult words.')),
                ('sponsors', models.TextField(blank=True, help_text='Sponsors or underwriters if need to indicate any.')),
                ('pull_quotes', models.TextField(blank=True, help_text='List of quotes and attributions to be used as pull quotes.')),
                ('embeds', models.TextField(blank=True, help_text='The necessary information to embed something like a Tweet, FB post, map or video.')),
                ('sidebar_content', models.TextField(blank=True, help_text='Content separate from body text meant for sidebar or inset presentation.')),
                ('series_title', models.TextField(blank=True, help_text='Title of the video series.')),
                ('episode_number', models.CharField(blank=True, help_text='If the video is part of a series, the episode number.', max_length=75)),
                ('usage_rights', models.TextField(blank=True, help_text='Information regarding the usage of the video if shared.')),
                ('tape_datetime', models.DateTimeField(blank=True, help_text='Tape date.', null=True)),
                ('locations', models.TextField(blank=True, help_text='Shoot locations.')),
                ('custom_one', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_two', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_three', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_four', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_five', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('anchor_profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Anchor')),
                ('credit', models.ManyToManyField(blank=True, help_text='The full participant name(s) to be listed as the credit for the item.', related_name='item_credit', to=settings.AUTH_USER_MODEL)),
                ('editor', models.ManyToManyField(blank=True, help_text='The full participant name(s) to be listed as the editor(s) for the item.', related_name='item_editor', to=settings.AUTH_USER_MODEL)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(help_text='Parent story of this item.', on_delete=django.db.models.deletion.CASCADE, to='editorial.Story')),
                ('team', models.ManyToManyField(blank=True, help_text='Contributing participant.', related_name='item_team_member', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='editorial.ItemTemplate')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
        ),
    ]
