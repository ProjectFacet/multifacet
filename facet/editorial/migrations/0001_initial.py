# Generated by Django 3.0.3 on 2020-04-06 23:50

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('note', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AudioAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('original', models.BooleanField(default=True, help_text='This content originally belonged to this entity.')),
                ('attribution', models.TextField(blank=True, help_text='The appropriate information for crediting the asset.', max_length=200)),
                ('audio', models.FileField(blank=True, upload_to='audio')),
                ('link', models.URLField(blank=True, help_text='Link to audio file hosted elsewhere.', max_length=400)),
                ('asset_type', models.CharField(choices=[('MP3', 'mp3'), ('WAV', 'wav'), ('SC', 'SoundCloud')], help_text='The kind of audio.', max_length=20)),
                ('file_type', models.CharField(help_text='The file extension', max_length=10)),
                ('file_size', models.DecimalField(decimal_places=2, help_text='Size of uploaded file.', max_digits=8)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContentLicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sitewide', models.BooleanField(default=False, help_text='If no ownership entity, True.')),
                ('custom', models.BooleanField(default=False, help_text='If created by entity or participant, True. If creative commons, False.')),
                ('name', models.TextField(help_text='Name for the license.')),
                ('terms', models.TextField(blank=True, help_text='Content of the terms.')),
                ('upload', models.FileField(blank=True, null=True, upload_to='license/%Y/%m/%d/')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
            ],
            options={
                'verbose_name': 'Content License',
                'verbose_name_plural': 'Content Licenses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('original', models.BooleanField(default=True, help_text='This content originally belonged to this entity.')),
                ('attribution', models.TextField(blank=True, help_text='The appropriate information for crediting the asset.', max_length=200)),
                ('document', models.FileField(blank=True, upload_to='documents')),
                ('asset_type', models.CharField(choices=[('PDF', 'Adobe PDF'), ('WORD DOC', 'Word Doc'), ('TEXT', 'Text File'), ('COMMA SEPARATED', 'Comma Separated'), ('EXCEL', 'Excel File'), ('OTHER', 'Other')], help_text='The kind of document.', max_length=20)),
                ('file_type', models.CharField(help_text='The file extension', max_length=10)),
                ('file_size', models.DecimalField(decimal_places=2, help_text='Size of uploaded file.', max_digits=8)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('original', models.BooleanField(default=True, help_text='This content originally belonged to this entity.')),
                ('attribution', models.TextField(blank=True, help_text='The appropriate information for crediting the asset.', max_length=200)),
                ('asset_type', models.CharField(choices=[('PHOTO', 'Photograph'), ('GRAPHIC', 'Graphic or Illustration')], help_text='The kind of image.', max_length=20)),
                ('file_type', models.CharField(help_text='The file extension', max_length=10)),
                ('file_size', models.DecimalField(decimal_places=2, help_text='Size of uploaded file.', max_digits=8)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name identifying the project.', max_length=75)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('sensitive', models.BooleanField(default=False, help_text='Is a project sensitive, for limited viewing?')),
                ('collaborate', models.BooleanField(default=False, help_text='The project is being collaborated on with partners.')),
                ('archived', models.BooleanField(default=False, help_text='Is the content no longer active and needed?')),
                ('website', models.URLField(blank=True, help_text='Project website if applicable.', max_length=250)),
                ('anchor_profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Anchor')),
                ('collaborate_with', models.ManyToManyField(blank=True, help_text='Partner profiles selected to have collaborative access.', related_name='roject_collaboration_partners', to='base.Partner')),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('notes', models.ManyToManyField(blank=True, to='note.Note')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='SimpleAudio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('audio', models.FileField(blank=True, upload_to='audio')),
                ('link', models.URLField(blank=True, help_text='Link to audio file hosted elsewhere.', max_length=400)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SimpleDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('document', models.FileField(blank=True, upload_to='documents')),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SimpleImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SimpleVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('video', models.FileField(blank=True, upload_to='videos')),
                ('link', models.URLField(blank=True, help_text='Link to video file hosted elsewhere.', max_length=400)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Simple tag to find and collect content.', max_length=150)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='VideoAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Text for file name. Name it intuitively.', max_length=200)),
                ('description', models.TextField(blank=True, help_text='What is the asset. (If a photo or graphic, it should be the caption.)', max_length=300)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When the asset was created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is the asset sensitive, or associated with sensitve content?')),
                ('original', models.BooleanField(default=True, help_text='This content originally belonged to this entity.')),
                ('attribution', models.TextField(blank=True, help_text='The appropriate information for crediting the asset.', max_length=200)),
                ('video', models.FileField(blank=True, upload_to='videos')),
                ('link', models.URLField(blank=True, help_text='Link to video file hosted elsewhere.', max_length=400)),
                ('asset_type', models.CharField(choices=[('MP4', 'mp4'), ('YOUTUBE', 'YouTube'), ('VIMEO', 'Vimeo')], help_text='The kind of video.', max_length=20)),
                ('file_type', models.CharField(help_text='The file extension', max_length=10)),
                ('file_size', models.DecimalField(decimal_places=2, help_text='Size of uploaded file.', max_digits=8)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='editorial.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Update',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, help_text='Details regarding the update.')),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], default='LOW', help_text='Update urgency.', max_length=25)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Date time update was issued.')),
                ('contact', models.ForeignKey(help_text='For more information, contact:', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_content', models.OneToOneField(help_text='The anchor object', on_delete=django.db.models.deletion.CASCADE, related_name='update_anchor_object', to='base.Anchor')),
            ],
            options={
                'verbose_name': 'Update',
                'verbose_name_plural': 'Update',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name by which the story is identified.', max_length=250)),
                ('original', models.BooleanField(default=True, help_text='If original to participant/entity, true. If picked up, false.')),
                ('embargo', models.BooleanField(default=False, help_text='Is a story embargoed?')),
                ('embargo_datetime', models.DateTimeField(blank=True, help_text='When is the story no longer under embargo.', null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When was the story created.')),
                ('sensitive', models.BooleanField(default=False, help_text='Is a story sensitive and viewing it limited only to the team working on it?')),
                ('share', models.BooleanField(default=False, help_text='The story is being shared with partners.')),
                ('share_date', models.DateTimeField(blank=True, help_text='Estimated date the story will be available', null=True)),
                ('ready_to_share', models.BooleanField(default=False, help_text='The story is finished and ready to be picked up.')),
                ('collaborate', models.BooleanField(default=False, help_text='The story is being collaborated on with partners.')),
                ('archived', models.BooleanField(default=False, help_text='Is the content no longer active and needed?')),
                ('anchor_profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Anchor')),
                ('collaborate_with', models.ManyToManyField(blank=True, help_text='Partner profiles selected to have collaborative access.', related_name='story_collaboration_partners', to='base.Partner')),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('notes', models.ManyToManyField(blank=True, to='note.Note')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='editorial.Project')),
                ('share_with', models.ManyToManyField(blank=True, help_text='Partner profiles selected to have access to shared content.', related_name='share_partners', to='base.Partner')),
                ('simple_audio_assets', models.ManyToManyField(blank=True, to='editorial.SimpleAudio')),
                ('simple_document_assets', models.ManyToManyField(blank=True, to='editorial.SimpleDocument')),
                ('simple_image_assets', models.ManyToManyField(blank=True, to='editorial.SimpleImage')),
                ('simple_video_assets', models.ManyToManyField(blank=True, to='editorial.SimpleVideo')),
                ('team', models.ManyToManyField(blank=True, help_text='Contributing participant.', related_name='story_team_members', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='simple_audio_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleAudio'),
        ),
        migrations.AddField(
            model_name='project',
            name='simple_document_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleDocument'),
        ),
        migrations.AddField(
            model_name='project',
            name='simple_image_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleImage'),
        ),
        migrations.AddField(
            model_name='project',
            name='simple_video_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleVideo'),
        ),
        migrations.AddField(
            model_name='project',
            name='team',
            field=models.ManyToManyField(blank=True, help_text='Contributing participant.', related_name='project_team_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ItemTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sitewide', models.BooleanField(default=False, help_text='If no ownership entity, True.')),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('fields_used', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Fields used by this template.', size=None)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='When template was created.')),
                ('is_active', models.BooleanField(default=True)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
                'unique_together': {('name', 'entity_owner')},
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original', models.BooleanField(default=True, help_text='If original to participant/entity, true. If picked up, false.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Date time item was created.')),
                ('name', models.TextField(help_text='Internal name for item.')),
                ('headline', models.TextField(help_text='Headline of the item')),
                ('description', models.TextField(blank=True, help_text='Description of the item.')),
                ('content', models.TextField(blank=True, help_text='Content of the item.')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Pitch', 'Pitch'), ('In Progress', 'In Progress'), ('Edit', 'Edit'), ('Revision', 'Revision'), ('Needs Review', 'Needs Review'), ('Ready', 'Ready')], default='DRAFT', help_text='Item status choice.', max_length=25)),
                ('due_edit', models.DateTimeField(blank=True, help_text='Due for edit.', null=True)),
                ('run_date', models.DateTimeField(blank=True, help_text='Planned run date.', null=True)),
                ('update_note', models.TextField(blank=True, help_text='Text commenting regarding any updates or corrections made to the item.')),
                ('excerpt', models.TextField(blank=True, help_text='Excerpt from the item.')),
                ('dateline', models.CharField(blank=True, help_text='Where and when the item was created.', max_length=150)),
                ('share_note', models.TextField(blank=True, help_text='Information for organizations making a copy of the item.')),
                ('topic_code', models.CharField(blank=True, help_text='Unique code as needed to designate topic or coverage.', max_length=75)),
                ('internal_code', models.CharField(blank=True, help_text='Unique code as needed for ingest sytems or internal use. Use as needed.', max_length=75)),
                ('length', models.CharField(blank=True, help_text='Length of item for audio or video.', max_length=75)),
                ('wordcount', models.CharField(blank=True, help_text='Wordcount for text-based items.', max_length=75)),
                ('related_links', models.TextField(blank=True, help_text='Relevant links that can be included with the item.')),
                ('github_link', models.URLField(blank=True, help_text='Link to code for any custom feature.', max_length=300)),
                ('sources', models.TextField(blank=True, help_text='List of sources in the item.')),
                ('edit_note', models.TextField(blank=True, help_text='Information regarding allowable extent of editing and suggestions for specific kinds of edits.')),
                ('pronounciations', models.TextField(blank=True, help_text='Information about pronouncing names or potentially difficult words.')),
                ('sponsors', models.TextField(blank=True, help_text='Sponsors or underwriters if need to indicate any.')),
                ('pull_quotes', models.TextField(blank=True, help_text='List of quotes and attributions to be used as pull quotes.')),
                ('embeds', models.TextField(blank=True, help_text='The necessary information to embed something like a Tweet, FB post, map or video.')),
                ('sidebar_content', models.TextField(blank=True, help_text='Content separate from body text meant for sidebar or inset presentation.')),
                ('series_title', models.TextField(blank=True, help_text='Title of the video series.')),
                ('episode_number', models.CharField(blank=True, help_text='If the video is part of a series, the episode number.', max_length=75)),
                ('usage_rights', models.TextField(blank=True, help_text='Information regarding the usage of the video if shared.')),
                ('tape_datetime', models.DateTimeField(blank=True, help_text='Tape date.', null=True)),
                ('locations', models.TextField(blank=True, help_text='Shoot locations.')),
                ('custom_one', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_two', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_three', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_four', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('custom_five', models.TextField(blank=True, help_text='Participant-defined field.')),
                ('anchor_profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Anchor')),
                ('audio_assets', models.ManyToManyField(blank=True, to='editorial.AudioAsset')),
                ('content_license', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='editorial.ContentLicense')),
                ('credit', models.ManyToManyField(blank=True, help_text='The full participant name(s) to be listed as the credit for the item.', related_name='item_credit', to=settings.AUTH_USER_MODEL)),
                ('document_assets', models.ManyToManyField(blank=True, to='editorial.DocumentAsset')),
                ('editor', models.ManyToManyField(blank=True, help_text='The full participant name(s) to be listed as the editor(s) for the item.', related_name='item_editor', to=settings.AUTH_USER_MODEL)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
                ('image_assets', models.ManyToManyField(blank=True, to='editorial.ImageAsset')),
                ('participant_owner', models.OneToOneField(help_text='Participant who created/owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(help_text='Parent story of this item.', on_delete=django.db.models.deletion.CASCADE, to='editorial.Story')),
                ('tags', models.ManyToManyField(blank=True, to='editorial.Tag')),
                ('team', models.ManyToManyField(blank=True, help_text='Contributing participant.', related_name='item_team_member', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='editorial.ItemTemplate')),
                ('video_assets', models.ManyToManyField(blank=True, to='editorial.VideoAsset')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
        ),
        migrations.AddField(
            model_name='imageasset',
            name='tags',
            field=models.ManyToManyField(blank=True, to='editorial.Tag'),
        ),
        migrations.AddField(
            model_name='documentasset',
            name='tags',
            field=models.ManyToManyField(blank=True, to='editorial.Tag'),
        ),
        migrations.CreateModel(
            name='Correction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, help_text='Details regarding the correction.')),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], default='LOW', help_text='Correction urgency.', max_length=25)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Date time correction was created.')),
                ('contact', models.ForeignKey(help_text='For more information, contact:', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('corrected_content', models.OneToOneField(help_text='The anchor object', on_delete=django.db.models.deletion.CASCADE, related_name='correction_anchor_object', to='base.Anchor')),
            ],
            options={
                'verbose_name': 'Correction',
                'verbose_name_plural': 'Corrections',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='audioasset',
            name='tags',
            field=models.ManyToManyField(blank=True, to='editorial.Tag'),
        ),
    ]
