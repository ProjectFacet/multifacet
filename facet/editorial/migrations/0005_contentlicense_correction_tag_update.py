# Generated by Django 2.2.11 on 2020-04-06 02:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0004_auto_20200405_1926'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('editorial', '0004_item'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Simple tag to find and collect content.', max_length=150)),
            ],
            options={
                'ordering': ['text'],
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Update',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, help_text='Details regarding the update.')),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], default='LOW', help_text='Update urgency.', max_length=25)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Date time update was issued.')),
                ('contact', models.ForeignKey(help_text='For more information, contact:', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('updated_content', models.OneToOneField(help_text='The anchor object', on_delete=django.db.models.deletion.CASCADE, related_name='update_anchor_object', to='base.Anchor')),
            ],
            options={
                'ordering': ['-creation_date'],
                'verbose_name': 'Update',
                'verbose_name_plural': 'Update',
            },
        ),
        migrations.CreateModel(
            name='Correction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, help_text='Details regarding the correction.')),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], default='LOW', help_text='Correction urgency.', max_length=25)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Date time correction was created.')),
                ('contact', models.ForeignKey(help_text='For more information, contact:', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('corrected_content', models.OneToOneField(help_text='The anchor object', on_delete=django.db.models.deletion.CASCADE, related_name='correction_anchor_object', to='base.Anchor')),
            ],
            options={
                'ordering': ['-creation_date'],
                'verbose_name': 'Correction',
                'verbose_name_plural': 'Corrections',
            },
        ),
        migrations.CreateModel(
            name='ContentLicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sitewide', models.BooleanField(default=False, help_text='If no ownership entity, True.')),
                ('custom', models.BooleanField(default=False, help_text='If created by entity or participant, True. If creative commons, False.')),
                ('name', models.TextField(help_text='Name for the license.')),
                ('terms', models.TextField(blank=True, help_text='Content of the terms.')),
                ('upload', models.FileField(blank=True, null=True, upload_to='license/%Y/%m/%d/')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('entity_owner', models.OneToOneField(help_text='Entity that owns this.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.EntityOwner')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Content License',
                'verbose_name_plural': 'Content Licenses',
            },
        ),
    ]
