# Generated by Django 3.0.3 on 2020-04-06 23:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('editorial', '0001_initial'),
        ('entity', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('note', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Call',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Title of the call.', max_length=50)),
                ('text', models.TextField(help_text='Text of the call.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Day/Time call was created.')),
                ('expiration_date', models.DateTimeField(blank=True, help_text='Day/Time call ends.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this call active?')),
                ('urgent', models.BooleanField(default=False, help_text='Is this call urgent?')),
                ('timeframe', models.CharField(blank=True, help_text='What is the timeframe for responses?', max_length=100, null=True)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Active', 'Active'), ('Complete', 'Complete')], help_text='Pitch status choice.', max_length=25)),
                ('organization', models.ForeignKey(help_text='Organization that is making this call.', on_delete=django.db.models.deletion.CASCADE, to='entity.NewsOrganization')),
            ],
            options={
                'verbose_name': 'Call for Pitch',
                'verbose_name_plural': 'Calls for Pitch',
            },
        ),
        migrations.CreateModel(
            name='FreelanceJournalist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume', models.FileField(blank=True, help_text='PDF of contractor resume.', null=True, upload_to='resumes/%Y/%m/%d')),
                ('address', models.TextField(blank=True, help_text='Mailing address.')),
                ('availability', models.TextField(blank=True, help_text='Notes on when a contractor is available or not.')),
                ('current_location', models.TextField(blank=True, help_text="Freelancer's specific location.")),
                ('gear', models.TextField(blank=True, help_text='Gear that a contractor has access to and skills for.')),
                ('public', models.BooleanField(default=True, help_text='Is the contractor publicly listed?')),
                ('portfolio_link1', models.URLField(blank=True, help_text='Link to portfolio item.', max_length=500, null=True)),
                ('portfolio_link2', models.URLField(blank=True, help_text='Link to portfolio item.', max_length=500, null=True)),
                ('portfolio_link3', models.URLField(blank=True, help_text='Link to portfolio item.', max_length=500, null=True)),
                ('participant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelance Journalist',
                'verbose_name_plural': 'Freelance Journalists',
            },
        ),
        migrations.CreateModel(
            name='FreelanceManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public', models.BooleanField(default=False, help_text='Is this freelance manager publicly listed?')),
                ('participant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelance Manager',
                'verbose_name_plural': 'Freelance Managers',
            },
        ),
        migrations.CreateModel(
            name='Pitch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Title of the pitch.')),
                ('text', models.TextField(help_text='Text of the pitch.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Day pitch was created.')),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Pitched', 'Pitched'), ('Accepted', 'Accepted'), ('Complete', 'Complete')], help_text='Pitch status choice.', max_length=25)),
                ('exclusive', models.BooleanField(default=False, help_text='Is this pitch for an assignment exclusive to the recipient?')),
                ('call', models.ForeignKey(blank=True, help_text='Call if pitch is in response to a call.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelance.Call')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceJournalist')),
                ('recipient', models.ForeignKey(blank=True, help_text='Freelance Manager being pitched.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelance.FreelanceManager')),
                ('simple_audio_assets', models.ManyToManyField(blank=True, to='editorial.SimpleAudio')),
                ('simple_document_assets', models.ManyToManyField(blank=True, to='editorial.SimpleDocument')),
                ('simple_image_assets', models.ManyToManyField(blank=True, to='editorial.SimpleImage')),
                ('simple_video_assets', models.ManyToManyField(blank=True, to='editorial.SimpleVideo')),
            ],
            options={
                'verbose_name': 'Freelance Pitch',
                'verbose_name_plural': 'Freelance Pitches',
            },
        ),
        migrations.CreateModel(
            name='FreelanceInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_code', models.CharField(help_text='Text or numberic short identifier for Invoice.', max_length=300)),
                ('text', models.TextField(help_text='Details of the invoice.')),
                ('total_due', models.IntegerField(help_text='Total value of the invoice.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Day assignment was created.')),
                ('submitted', models.BooleanField(default=False, help_text='Invoice has been submitted.')),
                ('submitted_date', models.DateTimeField(blank=True, help_text='Datetime invoice was submitted to talent editor.')),
                ('under_review', models.BooleanField(default=False, help_text='Invoice is under review by Freelance Manager/News Organization.')),
                ('paid', models.BooleanField(default=False, help_text='Payment has been remitted for this assignment.')),
                ('payment_submitted_date', models.DateTimeField(blank=True, help_text='Datetime payment was remitted or scheduled to remit to freelancer.')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceJournalist')),
                ('manager', models.ForeignKey(help_text='Manager responsible for this assignment.', on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceManager')),
                ('organization', models.ForeignKey(help_text='Organization that owns this assignment.', on_delete=django.db.models.deletion.CASCADE, to='entity.NewsOrganization')),
                ('simple_audio_assets', models.ManyToManyField(blank=True, to='editorial.SimpleAudio')),
                ('simple_document_assets', models.ManyToManyField(blank=True, to='editorial.SimpleDocument')),
                ('simple_image_assets', models.ManyToManyField(blank=True, to='editorial.SimpleImage')),
                ('simple_video_assets', models.ManyToManyField(blank=True, to='editorial.SimpleVideo')),
            ],
            options={
                'verbose_name': 'Freelance Invoice',
                'verbose_name_plural': 'Freelance Invoices',
            },
        ),
        migrations.AddField(
            model_name='call',
            name='owner',
            field=models.ForeignKey(help_text='Freelance Manager that owns this call.', on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceManager'),
        ),
        migrations.AddField(
            model_name='call',
            name='simple_audio_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleAudio'),
        ),
        migrations.AddField(
            model_name='call',
            name='simple_document_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleDocument'),
        ),
        migrations.AddField(
            model_name='call',
            name='simple_image_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleImage'),
        ),
        migrations.AddField(
            model_name='call',
            name='simple_video_assets',
            field=models.ManyToManyField(blank=True, to='editorial.SimpleVideo'),
        ),
        migrations.AddField(
            model_name='call',
            name='tags',
            field=models.ManyToManyField(blank=True, to='editorial.Tag'),
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Name of the assignment.')),
                ('text', models.TextField(help_text='Details of the assignment.')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Day assignment was created.')),
                ('complete', models.BooleanField(default=False, help_text='Is the assignment complete?')),
                ('rate', models.CharField(help_text='Rate at which the assignment is being completed.', max_length=100)),
                ('invoiced', models.BooleanField(default=False, help_text='An invoice has been submitted for this assignment.')),
                ('paid', models.BooleanField(default=False, help_text='Payment has been remitted for this assignment.')),
                ('call', models.ForeignKey(blank=True, help_text='If this assignment is related to a call, which one?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelance.Call')),
                ('editor', models.ForeignKey(help_text='Editor responsible for this assignment.', on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceManager')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceJournalist')),
                ('item', models.ForeignKey(blank=True, help_text='Which item is this assignment related to?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='editorial.Item')),
                ('notes', models.ManyToManyField(blank=True, to='note.Note')),
                ('organization', models.ForeignKey(help_text='Organization that owns this assignment.', on_delete=django.db.models.deletion.CASCADE, to='entity.NewsOrganization')),
                ('pitch', models.ForeignKey(blank=True, help_text='If this assignment is related to a pitch, which one?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='freelance.Pitch')),
                ('project', models.ForeignKey(blank=True, help_text='Which project is this assignment related to?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='editorial.Project')),
                ('simple_audio_assets', models.ManyToManyField(blank=True, to='editorial.SimpleAudio')),
                ('simple_document_assets', models.ManyToManyField(blank=True, to='editorial.SimpleDocument')),
                ('simple_image_assets', models.ManyToManyField(blank=True, to='editorial.SimpleImage')),
                ('simple_video_assets', models.ManyToManyField(blank=True, to='editorial.SimpleVideo')),
                ('story', models.ForeignKey(blank=True, help_text='Which story is this assignment related to?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='editorial.Story')),
            ],
            options={
                'verbose_name': 'Freelance Assignment',
                'verbose_name_plural': 'Freelance Assignments',
            },
        ),
        migrations.CreateModel(
            name='OrganizationAffiliationRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.TextField(blank=True, help_text='Any notes for freelancer to remember about this affiliation.')),
                ('favorite', models.BooleanField(default=False, help_text='Is this news organization a favored contract?')),
                ('contacts', models.ManyToManyField(blank=True, help_text='News Organization Freelance Managers freelancer works with.', related_name='affilation_contact', to='freelance.FreelanceManager')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceJournalist')),
                ('notes', models.ManyToManyField(blank=True, to='note.Note')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entity.NewsOrganization')),
            ],
            options={
                'verbose_name': 'News Organization Affiliation Record',
                'verbose_name_plural': 'News Organization Affiliation Records',
                'unique_together': {('organization', 'freelancer')},
            },
        ),
        migrations.CreateModel(
            name='FreelancerAffiliationRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('w9_on_file', models.BooleanField(default=False, help_text='Does the organization have a W9 on file.')),
                ('rates', models.TextField(blank=True, help_text='The rates the freelancer is paid by the org.')),
                ('strengths', models.TextField(blank=True, help_text='Internal notes on strengths of the freelancer.')),
                ('disclosures', models.TextField(blank=True, help_text='Disclosures regarind any potential noteworthy conflicts of interest.')),
                ('editor_notes', models.TextField(blank=True, help_text='Any notes for editors on things to know when working with this freelancer.')),
                ('vetted', models.BooleanField(default=False, help_text='Is this freelancer a trusted regular?')),
                ('status', models.BooleanField(default=True, help_text='Is this freelancer currently working for the organization?')),
                ('freelancer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freelance.FreelanceJournalist')),
                ('notes', models.ManyToManyField(blank=True, to='note.Note')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entity.NewsOrganization')),
            ],
            options={
                'verbose_name': 'Freelancer Affiliation Record',
                'verbose_name_plural': 'Freelancer Affiliation Records',
                'unique_together': {('organization', 'freelancer')},
            },
        ),
    ]
